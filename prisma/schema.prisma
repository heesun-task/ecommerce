// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  password      String    // hashed password
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relation
  sessions      Session[]

  @@map("users")
}

model Session {
  id            String    @id @default(cuid())
  accessToken   String    @unique
  refreshToken  String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // foreign key, relation
  userId        String
  user          User      @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Category {
  id            String      @id @default(cuid())
  name          String    
  slug          String      @unique
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // relation
  parentId      String?     // top category if parentId is null
  parent        Category?   @relation("CategoryParent", fields: [parentId], references: [id])
  children      Category[]  @relation("CategoryParent")
  Product       Product[]
}

model Product {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  images        String[]
  basePrice     Float?    // base price for the product, can be overridden by variants
  active        Boolean   @default(true)
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relation
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]

  @@map("products")
}


model ProductVariant {
  id            String    @id @default(cuid())
  sku           String    @unique // Stock Keeping Unit
  size          String
  color         String
  price         Float     // final price for this variant
  stock         Int       @default(0)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relation
  productId     String
  product       Product   @relation(fields: [productId], references: [id])

  @@map("product_variants")
}